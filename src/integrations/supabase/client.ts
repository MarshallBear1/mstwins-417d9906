// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Capacitor } from '@capacitor/core';

const SUPABASE_URL = "https://fscendubnktdtmnxiipk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZzY2VuZHVibmt0ZHRtbnhpaXBrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwODEzMTcsImV4cCI6MjA2ODY1NzMxN30.F4TeAOAW2R_8di-9B-oz7jodfb9SS3HE1RAyeJGgaMY";

// Capacitor storage adapter for better mobile session persistence
const createCapacitorStorage = () => {
  return {
    getItem: async (key: string): Promise<string | null> => {
      if (Capacitor.isNativePlatform()) {
        const { Preferences } = await import('@capacitor/preferences');
        try {
          const { value } = await Preferences.get({ key });
          return value;
        } catch (error) {
          console.error('Error getting item from Capacitor storage:', error);
          return null;
        }
      } else {
        return localStorage.getItem(key);
      }
    },

    setItem: async (key: string, value: string): Promise<void> => {
      if (Capacitor.isNativePlatform()) {
        const { Preferences } = await import('@capacitor/preferences');
        try {
          await Preferences.set({ key, value });
        } catch (error) {
          console.error('Error setting item in Capacitor storage:', error);
        }
      } else {
        localStorage.setItem(key, value);
      }
    },

    removeItem: async (key: string): Promise<void> => {
      if (Capacitor.isNativePlatform()) {
        const { Preferences } = await import('@capacitor/preferences');
        try {
          await Preferences.remove({ key });
        } catch (error) {
          console.error('Error removing item from Capacitor storage:', error);
        }
      } else {
        localStorage.removeItem(key);
      }
    }
  };
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: createCapacitorStorage(),
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
});